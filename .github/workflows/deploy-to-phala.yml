name: Deploy Refinement Service to Phala Cloud

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
      environment:
        description: 'Override deployment environment'
        required: false
        type: choice
        options:
          - mainnet
          - moksha
      vm_name:
        description: 'VM name in Phala Cloud'
        required: false
      force_deploy:
        description: 'Force deployment (delete existing VM)'
        type: boolean
        required: false
        default: false
      debug_mode:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: true

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.set-env.outputs.environment_name }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment_name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            # Use the branch from the triggering workflow
            echo "Source branch: ${{ github.event.workflow_run.head_branch }}"
            if [ "${{ github.event.workflow_run.head_branch }}" == "main" ]; then
              echo "environment_name=mainnet" >> $GITHUB_OUTPUT
            else
              echo "environment_name=moksha" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment_name=mainnet" >> $GITHUB_OUTPUT
          else
            echo "environment_name=moksha" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: set-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.environment_name }}

    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}

    permissions:
      actions: read
      contents: read

    steps:
      - name: Confirm environment selection
        run: |
          echo "Deploying to: ${{ needs.set-environment.outputs.environment_name }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx python-dotenv cryptography

      - name: Set image tag
        id: set_image_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.image_tag }}" ]]; then
            # Use manually provided tag
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # For workflow_run events, get the SHA from the triggering workflow
            if [[ "${{ needs.set-environment.outputs.environment_name }}" == "mainnet" ]]; then
              IMAGE_TAG="main-${{ github.event.workflow_run.head_sha }}"
            else
              IMAGE_TAG="dev-${{ github.event.workflow_run.head_sha }}"
            fi
          else
            # Default fallback
            if [[ "${{ needs.set-environment.outputs.environment_name }}" == "mainnet" ]]; then
              IMAGE_TAG="main-${{ github.sha }}"
            else
              IMAGE_TAG="dev-${{ github.sha }}"
            fi
          fi

          echo "Using docker image tag: $IMAGE_TAG"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set force flag
        id: set_force_flag
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "force_flag=--force" >> $GITHUB_OUTPUT
          else
            echo "force_flag=" >> $GITHUB_OUTPUT
          fi

      - name: Set debug flag
        id: set_debug_flag
        run: |
          if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
            echo "debug_flag=--debug" >> $GITHUB_OUTPUT
          else
            echo "debug_flag=" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Doppler secrets
        uses: dopplerhq/secrets-fetch-action@v1.3.0
        with:
          doppler-token: ${{ secrets.DOPPLER_SERVICE_ACCOUNT_API_TOKEN }}
          doppler-project: vana-refinement-service
          doppler-config: ${{ needs.set-environment.outputs.environment_name }}
          inject-env-vars: true

      # Debug step: List environment variables (first run only list mode)
      - name: Debug - List environment variables
        if: ${{ github.event.inputs.debug_mode == 'true' }}
        run: |
          echo "Listing environment variables that would be encrypted and sent to Phala Cloud"
          python deploy_to_phala.py \
            --list-env \
            --auto-env \
            --exclude-env "CI" \
            --exclude-env "GITHUB_TOKEN"

      - name: Check for VM ID
        id: check_vm_id
        run: |
          if [[ -n "$PHALA_VM_ID" ]]; then
            echo "Found existing VM ID: $PHALA_VM_ID"
            echo "has_vm_id=true" >> $GITHUB_OUTPUT
          else
            echo "No VM ID found in Doppler configuration. Will create a new VM."
            echo "has_vm_id=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Phala Cloud
        env:
          PHALA_CLOUD_API_KEY: ${{ secrets.PHALA_CLOUD_API_KEY }}
          DOCKER_TAG: ${{ steps.set_image_tag.outputs.tag }}
          PHALA_VM_NAME: ${{ github.event.inputs.vm_name || format('{0}-refiner-1', needs.set-environment.outputs.environment_name) }}
        run: |
          DEPLOY_ENV="${{ needs.set-environment.outputs.environment_name }}"
          echo "Deploying with image tag: $DOCKER_TAG to environment: $DEPLOY_ENV"
          echo "VM Name: $PHALA_VM_NAME"

          # Set environment-specific variables
          if [[ "$DEPLOY_ENV" == "mainnet" ]]; then
            PHALA_IMAGE="dstack-0.3.5"
            COMPOSE_FILE="docker-compose.phala.yml"
          else # Default to moksha settings
            PHALA_IMAGE="dstack-dev-0.3.5"
            COMPOSE_FILE="docker-compose.phala.dev.yml"
          fi
          echo "Using Phala image: $PHALA_IMAGE"
          echo "Using Compose file: $COMPOSE_FILE"

          # Build the command with base parameters
          BASE_CMD=(
            python deploy_to_phala.py
            --docker-tag "$DOCKER_TAG"
            --update
            --docker-compose-file "$COMPOSE_FILE"
            --teepod-id 3
            --image "$PHALA_IMAGE"
            --auto-env
            --exclude-env "CI"
            --exclude-env "GITHUB_TOKEN"
            --vm-name "$PHALA_VM_NAME"
          )

          # Add VM ID parameter only if we have one
          if [[ "${{ steps.check_vm_id.outputs.has_vm_id }}" == "true" ]]; then
            BASE_CMD+=(--vm-id "${PHALA_VM_ID}")
            echo "Using Phala VM ID: $PHALA_VM_ID"
          else
            echo "Creating new VM (no existing VM ID found)"
          fi

          # Execute the command
          "${BASE_CMD[@]}"

      - name: Verify deployment
        run: |
          echo "Deployment completed. Check Phala Cloud dashboard for VM status."
          echo "Docker images used:"
          echo "- vanaorg/vana-refinement-service:${{ steps.set_image_tag.outputs.tag }}"